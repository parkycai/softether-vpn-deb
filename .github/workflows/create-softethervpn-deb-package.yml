name: Build and Release SoftEther VPN .deb Package

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  build-deb:
    runs-on: ubuntu-24.04
    permissions:
      contents: write # Required for creating releases
    steps:
      # Step 3: Get the latest SoftEther VPN release tag
      - name: Fetch latest release tag
        id: get_release
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/SoftEtherVPN/SoftEtherVPN/releases/latest | jq -r '.tag_name')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "Fetched latest tag: $LATEST_TAG"

      - name: Check existing tags in this repository
        id: check_tags
        run: |
          TAG_TO_CHECK="v${{ env.LATEST_TAG }}-deb"
          TAG_EXISTS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[] | .name' | grep -Fx "$TAG_TO_CHECK" || true)
          if [ -n "$TAG_EXISTS" ]; then
            echo "Tag $TAG_TO_CHECK already exists, skipping build."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "Tag $TAG_TO_CHECK not found, proceeding with build."
            echo "skip_build=false" >> $GITHUB_ENV
          fi
      # Step 2: Install dependencies
      - name: Install build dependencies
        if: env.skip_build != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc g++ make pkgconf libncurses5-dev libssl-dev libsodium-dev libreadline-dev zlib1g-dev



      # Step 4: clone softether vpn source
      - name: Clone SoftEther VPN source
        if: env.skip_build != 'true'
        run: |
          git clone --depth 1 --branch ${{ env.LATEST_TAG }} https://github.com/SoftEtherVPN/SoftEtherVPN.git softether-vpn
          cd softether-vpn
          git submodule init && git submodule update


      # Step 5: Create Debian packaging structure
      - name: Build source code
        if: env.skip_build != 'true'
        run: |
          cd softether-vpn
          ./configure
          make -C build
          
      # Step 6: Build the .deb package
      - name: Build .deb package
        if: env.skip_build != 'true'
        run: |
          cd softether-vpn/build
          cpack -G DEB

      # Step 7: Create or update GitHub release
      - name: Create GitHub Release
        if: env.skip_build != 'true'
        id: create_release
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.LATEST_TAG }}-deb
          release_name: SoftEther VPN ${{ env.LATEST_TAG }} .deb Package
          body: |
            Debian packages for SoftEther VPN version ${{ env.LATEST_TAG }}.
            Includes packages for server, client, bridge, command-line tools, and common dependencies.
          draft: false
          prerelease: false

      # Step 8: Delete source code assets from release
      - name: Delete source code assets
        if: env.skip_build == 'false'
        run: |
          RELEASE_ID=${{ steps.create_release.outputs.id }}
          ASSETS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets | jq -r '.[] | select(.name | test("Source code")) | .id')
          for ASSET_ID in $ASSETS; do
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -X DELETE \
              https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID
          done

      # Step 9: Upload all .deb packages to release
      - name: Upload all .deb packages to release
        if: env.skip_build == 'false'
        run: |
          for deb_file in softether-vpn/build/*.deb; do
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/vnd.debian.binary-package" \
              --data-binary "@$deb_file" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $deb_file)"
          done
